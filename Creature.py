from random import randint, uniform
import numpy as np
import copy
from NeuralNet import NeuralNet

"""

"""
class Creature(object):
    def __init__(self, autogenerated, grid_size, entity_grid):
        self.life_time = 1
        
        self.grid_size = grid_size
        self.pos_x = None
        self.pos_y = None
        
        self.energy = None
        self.creature_id = None
        self.neural_net = None
        
        if autogenerated:
            self.spawn_random(entity_grid)
        
    def spawn_random(self, entity_grid):
        self.energy = 25
        self.neural_net = NeuralNet(state_features=4, action_size=6, inherit=False)
        
        empty = False
        while (empty == False):
            self.pos_x = randint(0, self.grid_size-1)
            self.pos_y = randint(0, self.grid_size-1)
            
            if entity_grid[self.pos_x][self.pos_y][0] == 0:
                empty = True
		
        self.creature_id = uniform(0, 1)
        self.strength = uniform(0,1)
        
    def inherit(self, parent, entity_grid):
        spawn_x = [-1,0,1,1,1,0,-1,-1]
        spawn_y = [1,1,1,0,-1,-1,-1,0]
        
        success = False
        for i in range(8):
            if (parent.pos_x + spawn_x[i] >= 0 and parent.pos_x + spawn_x[i] < self.grid_size and parent.pos_y + spawn_y[i] >= 0 and parent.pos_y + spawn_y[i] < self.grid_size and entity_grid[parent.pos_x + spawn_x[i]][parent.pos_y + spawn_y[i]][0] == 0):
                self.pos_x = parent.pos_x + spawn_x[i]
                self.pos_y = parent.pos_y + spawn_y[i]
                success = True
                break
        if success:
            self.energy = parent.get_reproductive_cost()
            self.neural_net = NeuralNet(state_features=4, action_size=6, inherit=True)
            self.neural_net.inherit_network(parent.neural_net.q_network)
            self.creature_id = self.value_shift(parent.creature_id)
            self.strength = self.value_shift(parent.strength)
        return success
        
    def value_shift(self, value):
        new_value = value * uniform(0.99999, 1.00001)
        if (new_value > 1):
            new_value = 1
        return new_value
        
    def get_action(self, state):
        action = self.neural_net.act(state)
        return action
        
    def get_rewards(self, state, action, reward, future_state):
        self.neural_net.store(state, action, reward, future_state)
        
    def get_reproductive_cost(self):
        return int(self.strength * 50)
        
    def check_living(self):
        if self.energy > 0:
            return True
        else:
            return False
            
    def check_related(self, creature):
        mse = (self.creature_id - creature.creature_id) ** 2
        if mse > 0.001:
            return False
        else: 
            return True
        
